{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","io","connect","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","handleTyping","username","state","emit","on","data","isTyping","userTyping","submitForm","preventDefault","_this$state","message","renderChat","chat","chatHistory","react_default","a","createElement","id","key","length","concat","_this2","resp","_this3","_this$state2","className","map","onSubmit","type","autoComplete","placeholder","onChange","required","onKeyDown","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAIMA,SAASC,IAAGC,QAAQ,sCAoFXC,cAjFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmBRQ,aAAe,SAAAC,GACbR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GAAiBO,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SArBzBb,EAwBnBc,aAAe,WAAM,IACXC,EAAaf,EAAKgB,MAAlBD,SACRpB,EAAOsB,KAAK,SAAUF,GACtBpB,EAAOuB,GAAG,SAAU,SAAAC,GAAI,OAAInB,EAAKS,SAAS,CAAEW,UAAU,EAAMC,WAAYF,OA3BvDnB,EA8BnBsB,WAAa,SAAAd,GACXA,EAAEe,iBADc,IAAAC,EAEcxB,EAAKgB,MAC7BG,EAAO,CAAEJ,SAHCS,EAERT,SACiBU,QAHTD,EAEEC,SAElB9B,EAAOsB,KAAK,OAAQE,GACpBnB,EAAKS,SAAS,CAAEgB,QAAU,MAnCTzB,EAuCnB0B,WAAa,SAACC,EAAMC,GAAP,OACXC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SAASC,IAAKL,EAAYM,QAAU,GAC1CL,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,iBAAAI,OAAYR,EAAKZ,SAAjB,MAAH,IAA2CY,EAAKF,QAAhD,OAvCFzB,EAAKgB,MAAQ,CACXD,SAAU,GACVU,QAAS,GACTG,YAAa,GACbP,WAAY,GACZD,UAAU,GAPKpB,mFAWC,IAAAoC,EAAAjC,KAClBR,EAAOuB,GAAG,OAAQ,SAAAmB,GAChBD,EAAK3B,SAAS,CACZmB,YAAaQ,EAAKpB,MAAMY,YAAYO,OAAO,CAACE,IAC5CjB,UAAU,uCA+BP,IAAAkB,EAAAnC,KAAAoC,EAC0DpC,KAAKa,MAA9DD,EADDwB,EACCxB,SAAUU,EADXc,EACWd,QAASL,EADpBmB,EACoBnB,SAAUQ,EAD9BW,EAC8BX,YAAaP,EAD3CkB,EAC2ClB,WAClD,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXZ,EAAYa,IAAI,SAAAd,GAAI,OAAMW,EAAKZ,WAAWC,EAAMC,MAEpDC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAaZ,EAAQ,GAAAe,OAAKd,EAAL,wBAAwC,MACrEQ,EAAAC,EAAAC,cAAA,QAAMC,GAAG,OAAOU,SAAUvC,KAAKmB,YAC7BO,EAAAC,EAAAC,cAAA,SACEY,KAAK,OACL/B,KAAK,WACLC,MAAOE,EACP6B,aAAa,MACbC,YAAY,sBACZC,SAAU3C,KAAKI,aACfwC,UAAQ,IAEVlB,EAAAC,EAAAC,cAAA,SACEY,KAAK,OACL/B,KAAK,UACLC,MAAOY,EACPoB,YAAY,gBACZD,aAAa,MACbI,UAAW7C,KAAKW,aAChBgC,SAAU3C,KAAKI,aACfwC,UAAQ,IAEVlB,EAAAC,EAAAC,cAAA,+BA3EQkB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbde693f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\n\nconst socket = io.connect(\"https://chaty-back.herokuapp.com/\"); \n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: '',\n      message: '',\n      chatHistory: [],\n      userTyping: '',\n      isTyping: false,\n    };\n  };\n\n  componentDidMount() {\n    socket.on('chat', resp => {\n      this.setState({\n        chatHistory: this.state.chatHistory.concat([resp]),\n        isTyping: false,\n      });\n    });\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  handleTyping = () => {\n    const { username } = this.state;\n    socket.emit('typing', username);\n    socket.on('typing', data => this.setState({ isTyping: true, userTyping: data }));\n  }\n\n  submitForm = e => {\n    e.preventDefault();\n    const { username, message } = this.state;\n    const data = { username, message };\n    socket.emit('chat', data);\n    this.setState({ message:  ''})\n  }\n\n\n  renderChat = (chat, chatHistory) => (\n    <div id=\"output\" key={chatHistory.length += 1}>\n      <p><strong>{`${chat.username}:`}</strong> {chat.message} </p>\n    </div>\n  )\n\n\n  render() {\n    const { username, message, isTyping, chatHistory, userTyping } = this.state;\n    return (\n      <div id=\"wrap\">\n        <div className=\"chat-wrap\">\n          { chatHistory.map(chat => ( this.renderChat(chat, chatHistory))) }\n        </div>\n        <div id=\"feedback\">{ isTyping? `${userTyping} is typing a message` : null }</div>\n        <form id=\"form\" onSubmit={this.submitForm}>\n          <input\n            type=\"text\"\n            name=\"username\"\n            value={username}\n            autoComplete=\"off\"\n            placeholder=\"Enter your nickname\"\n            onChange={this.handleChange}\n            required\n          />\n          <input\n            type=\"text\"\n            name=\"message\"\n            value={message}\n            placeholder=\"Enter message\"\n            autoComplete=\"off\"\n            onKeyDown={this.handleTyping}\n            onChange={this.handleChange}\n            required\n          />\n          <button>Send</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}